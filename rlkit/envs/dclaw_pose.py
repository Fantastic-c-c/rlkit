from robel.dclaw.pose import BaseDClawPose

import numpy as np
from . import register_env


@register_env('dclaw-pose')
class DClawPoseEnv(BaseDClawPose):
    def __init__(self,
                 randomize_tasks=True,
                 n_tasks=5,
                 **kwargs
                 ):
        BaseDClawPose.__init__(self, **kwargs)
        print("RANDOMIZE TASKS? " + str(randomize_tasks))
        if randomize_tasks:
            self.goals = [self._make_random_pose() for _ in range(n_tasks)]
        else:
            # self.goals = [
            #     [0.33216093, -0.34648382, 1.05373163, 0.3457113, -0.75016362, 0.01385098,
            #      0.04234343, -0.35791852, -0.56737231],
            #     [0.21918838, -0.08618355, -0.55813989, -0.46893439, -0.77759893, 0.71962147,
            #      0.23718581, -0.93691183, -1.3277795]
            # ]
            self.goals = [
                [0.3343874752291428, -0.8093666132571591, -0.30447324506850615, 0.3153638477903222,
                  -0.010148708935515893, -1.1105986130807959, -0.4625121725696744, -0.3735565517632584,
                  0.4114102380451541],
                 [-0.013600475223797981, -0.401592410770534, 0.48392585857618275, 0.08416518211296664,
                  -0.6817886773559969, -1.0311119851635744, -0.1835424956250386, -0.927236366085517,
                  -0.07902954496523629],
                 [-0.32272946119089224, -0.2408954476472145, -1.3468236413693393, 0.09154418347886262,
                  -0.31537802669491277, -0.13028058718867164, -0.18543900845951578, -0.25875551657574103,
                  -0.19876540754626526],
                 [-0.37163734044539815, -0.15063114075110617, -0.1837777490124839, -0.015379360284814902,
                  -0.2303060558456539, 1.433367231791148, -0.23949944395058426, -0.2881236126008957,
                  1.0431371896020152],
                 [0.4756415311018012, -0.9630822983968804, -1.2297141116271775, -0.08048237317062723,
                  -0.30315918096405814, -0.9500104791706625, -0.1804752077130522, -0.007706052116445372,
                  -1.4216243548593483],
                 [-0.26964841845247356, -0.8288339807043114, 0.22448447097429658, 0.1977356054834991,
                  -0.6476213306855718, -1.469407605115825, -0.43706951402708016, -0.30613045570550035,
                  -0.19293738528715698],
                 [0.18518884522159484, -0.9630666333968531, 0.5968960087941393, 0.39087493402578677,
                  -0.6872690868687513, 0.3107175738192074, -0.2712419592234092, -0.8978352977740629,
                  -0.08756178747514287],
                 [0.15565573862040905, -0.5401333645492181, 0.6914482086813698, -0.22399568853155938,
                  -0.9689451746229956, -1.4150399284151467, -0.07166764393032926, -0.33390757650988734,
                  1.4638924661950594],
                 [-0.17439587246371474, -0.0204127499247031, -0.6953283881217796, -0.20878368757692706,
                  -0.49676651249394066, 0.5357262448154443, -0.26049350423043865, -0.838230406926932,
                  0.7551192494241254],
                 [0.35975050293723854, -0.7485205246438833, 0.9429663003011055, 0.275229217648999, -1.0433209135138612,
                  0.7923018949020073, -0.4559763615566283, -0.895845345362489, -0.20475381704002937],
                 [-0.14963042043911684, -0.27182464891389524, 1.4810770838062437, -0.0309567683880706,
                  -0.6807800830525292, -1.228561225364044, 0.18517898026525303, -0.52262800893696, -0.2588546252450137],
                 [-0.15902615266627013, -0.8251823535191379, 0.5033471562374228, 0.08547013447636775,
                  -0.5499631503658563, -1.3116715475701333, -0.22417313138125394, -0.3897200144845273,
                  -1.211487087543487],
                 [-0.38148491362567283, -0.055604626580235794, -0.2384586103232278, 0.4702808797142407,
                  -0.7880547875962017, -1.3166014544588123, 0.10939402165589718, -0.829008743051113,
                  -0.05041280861509567],
                 [-0.47967539807435666, -0.1805991524522994, 0.38223506240385463, 0.47287349284550495,
                  -0.28038597164732504, -0.661461379452675, 0.011309586331114896, -1.0227019817477012,
                  0.6439921050727193],
                 [0.08815284808406076, -0.36883195462635276, -1.181489998585887, 0.3723824600632444,
                  -0.8594513026987556, 0.5553056245427501, -0.11176232041881984, -0.656833662381089,
                  0.6154022932899035],
                 [-0.004902428084363364, -0.6236004226132954, 0.19980904603614724, 0.2339322776682481,
                  -0.448230080493903, -1.0823206146610187, -0.03086974618429683, -0.8692640120317779,
                  -0.8909772619013743],
                 [0.36968620942430674, -0.3878745137754488, 1.5526945725031505, -0.061234966394923984,
                  -0.004328994669280606, -0.04313290791643154, -0.42575421135671515, -0.0385328327441663,
                  0.7618609847564026],
                 [-0.05028390211273681, -0.4803654227771066, -1.2552257879572675, -0.25856757853697837,
                  -1.0335449603829696, 0.9730011153748377, -0.4792066219327895, -0.01520438725136497,
                  -0.1785964922405745],
                 [0.3662211664380305, -0.7101704284785552, -1.493419119239495, -0.04847620825821791,
                  -0.9198641091922424, 0.5867354408419416, 0.37320243451809, -0.3825693522275213, 1.3569862386417322],
                 [-0.4248199814887703, -0.5649558352135196, 1.4129802120769548, 0.3237989947722868,
                  -0.24746762087073693, 0.7551466363114558, -0.10882536144580401, -0.32150607380107876,
                  -0.4469759100561683]
            ]
        self.goals = self.goals[:n_tasks]
        print(np.array(self.goals).tolist())
        assert len(self.goals) == n_tasks, "The number of goals should equal the number of tasks"
        self.reset_task(0)  # should this be random?

    def get_all_task_idx(self):
        return range(len(self.goals))

    def get_goal(self):
        return self._desired_pos

    def reset_task(self, idx):
        self._desired_pos = self.goals[idx]
        self.reset()

    def get_tasks(self):
        return self.goals
